name: cardano

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

jobs:
  build:
    name: ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/cache/
            ~/.cargo/git/db/ 
            target/
        - os: macos-latest
          target: x86_64-apple-darwin
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/cache/
            ~/.cargo/git/db/ 
            target/
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Prerequisites
        run: |
          case ${{ matrix.target }} in
            *-unknown-linux-*)
              sudo apt-get update -y
              sudo apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libncursesw5 libtool autoconf -y
              ;;
            *-apple-darwin)
              brew install automake
              ;;
          esac
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.os.toolchain || 'stable' }}
          target: ${{ matrix.target }}
          override: true
          default: true
          components: rustfmt
      - name: Build Libsodium
        if: contains(matrix.job.features, 'libsodium-sys')
        run: sudo autoreconf -vfi && ./configure && make && make install
        working-directory: contrib/libsodium
      - name: Format
        uses: actions-rs/cargo@v1.0.1
        with:
          command: fmt
          args: --all -- --check
      - name: Build Cardano CLI 
        uses: actions-rs/cargo@v1.0.1
        with:
          use-cross: ${{ matrix.os.use-cross }}
          command: build
          args: --release --features "${{ join(matrix.features, ',') }}" --target ${{ matrix.target }}
      - name: Use cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.path }} 
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-
      - name: Run tests
        uses: actions-rs/cargo@v1.0.1
        with: 
          use-cross: ${{ matrix.os.use-cross }}
          command: test
          args: --release --features "${{ join(matrix.features, ',') }}" --target ${{ matrix.target }}